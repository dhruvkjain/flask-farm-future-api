# -*- coding: utf-8 -*-
"""Hackout.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mBfTsJvwbL0if4BndQzEtJmAXaCOxXka
"""

!pip install pmdarima

import pandas as pd
import numpy as np

df=pd.read_excel('/Final DataSet.xlsx',index_col='Date',parse_dates=True)
print('Shape of data',df.shape)
df

df['Bihar'].plot(figsize=(10, 5), color='blue')
df['Gujarat'].plot(figsize=(10,5), color='red')
df['Maharashtra'].plot(figsize=(10,5), color='green')

from statsmodels.tsa.stattools import adfuller

test_result=adfuller(df['Bihar'])

#Ho: It is non stationary
#H1: It is stationary

def adfuller_test(sales):
    result=adfuller(sales)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )
    if result[1] <= 0.05:
        print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary")
    else:
        print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

adfuller_test(df['Bihar'])

# prompt: convert above non-stationary data to stationary data

df['Bihar Price First Difference'] = df['Bihar'] - df['Bihar'].shift(1)
df['Bihar Price First Difference'].plot(figsize=(12,8))
adfuller_test(df['Bihar Price First Difference'].dropna())

!pip install statsmodels
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf
import matplotlib.pyplot as plt
import statsmodels.api as sm

model=sm.tsa.statespace.SARIMAX(df['Bihar'],order=(0, 1, 0),seasonal_order=(0,1,1,12))
results=model.fit()

predict_df=pd.read_excel('/Prediction.xlsx',index_col='Date',parse_dates=True)

pred = results.get_prediction(start=pd.to_datetime('2023-07-01'), end=pd.to_datetime('2023-12-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = df['Bihar'].plot(label='Observed')
pred.predicted_mean.plot(ax=ax, label='Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('Crop Price')
plt.legend()
plt.show()